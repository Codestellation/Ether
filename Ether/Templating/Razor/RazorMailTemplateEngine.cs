using System;
using System.IO;
using System.Reflection;
using Codestellation.Ether.Core;

namespace Codestellation.Ether.Templating.Razor
{
    public class RazorMailTemplateEngine : IMailTemplateEngine
    {
        private const string TemplatesNamespaceName = "Codestellation.Ether.AutoGeneratedRazorTemplates";

        private readonly Assembly _templatesAssembly;

        public RazorMailTemplateEngine(string[] templatesFilePath)
        {
            var compiler = new RazorTemplatesCompiler(TemplatesNamespaceName, typeof (DynamicRazorMailTemplate));
            _templatesAssembly = compiler.Compile(templatesFilePath);
        }

        public MailView Render(object mailModel)
        {
            string subject = null;
            string templateClassName = mailModel.GetType().Name;

            var context = new RenderContext();
            do
            {
                RazorMailTemplateBase template = CreateTemplate(templateClassName);
                template.SetContext(context);
                template.SetModel(mailModel);
                template.Execute();

                if (string.IsNullOrEmpty(subject))
                {
                    subject = template.Subject;
                }

                context.Flush();
                templateClassName = template.Layout; // take next

            } while (string.IsNullOrEmpty(templateClassName) == false);

            string body = context.RenderBody();
            return new MailView(subject, body);
        }

        private RazorMailTemplateBase CreateTemplate(string templateClassName)
        {
            string templateTypeName = string.Format("{0}.{1}", TemplatesNamespaceName, templateClassName);
            var type = _templatesAssembly.GetType(templateTypeName, true);
            var template = (RazorMailTemplateBase)Activator.CreateInstance(type); // TODO: optimize
            return template;
        }

        public static RazorMailTemplateEngine CreateUsingTemplatesFolder(string folderPath)
        {
            if (Path.IsPathRooted(folderPath) == false)
            {
                string uriAssemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase);
                string assemblyFolder = new Uri(uriAssemblyFolder).LocalPath;
                folderPath = Path.Combine(assemblyFolder, folderPath);
            }

            string[] templateFiles = Directory.GetFiles(folderPath, "*.cshtml", SearchOption.AllDirectories);
            return new RazorMailTemplateEngine(templateFiles);
        }
    }
}